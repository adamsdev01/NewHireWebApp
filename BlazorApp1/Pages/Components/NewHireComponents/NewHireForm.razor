@page "/NewHire/Add"
@page "/NewHire/Edit/Id/{Id:long}"

@if(Id == 0)
{
    <h3>@AddTitle</h3>
}
else
{
    <h3>@EditTitle</h3>
}

<EditForm Model="@newHire" OnValidSubmit="SaveNewHire">
    <div class="container">
        <div class="row">
            <div class="col-md-4">
                <label>First Name</label>
                <InputText @bind-Value="@newHire.FirstName"></InputText>
            </div>
            <div class="col-md-4">
                <label>Middle Name</label>
                <InputText @bind-Value="@newHire.MiddleName"></InputText>
            </div>
            <div class="col-md-4">
                <label>Last Name</label>
                <InputText @bind-Value="@newHire.LastName"></InputText>
            </div>
        </div>
        <br />
        <div class="row">
            <div class="col-md-4">
                <label>Photo</label>
                <div></div>
                <InputFile OnChange="HandleFileSelected" />
            </div>
            <br />
            <br />
            @if(selectedFile == null && selectedNewHire == null)
            {
                <div>
                    <i class="bi bi-person-bounding-box" style="font-size:96px"></i>
                </div>
            }
            else if (selectedFile != null)
            {
                <div>
                    @if(imageDataUrl != null)
                    {
                        <img src="@imageDataUrl" alt="Selected Image" width="150" height="150" />
                    }
                   
                </div>
            }
            @if(selectedNewHire.ImageBytes.Length > 0)
            {
                <br />
                <div>
                    <p>Current Photo</p>
                    <img src="@existingImageDataUrl" alt="Existing Image" width="150" height="150" />
                </div>
                <br />                
            }
        </div>
        <br />
        <br />
        <div class="form-group">
            <button type="submit" class="btn btn-primary"><i class="bi bi-save"></i> Save</button>
            <button class="btn btn-warning" @onclick="Cancel"><i class="bi bi-x-circle"></i> Cancel</button>
        </div>
    </div>
   
</EditForm>


@code {

    [Parameter]
    public long Id { get; set; }
    public NewHire newHire = new();
    public NewHire selectedNewHire { get; set; }
    public string AddTitle = "Add New Hire";
    public string EditTitle = "Edit Employee Information";
    private IBrowserFile selectedFile;
    private string? fileName;
    private string? imageDataUrl;
    private string existingImageDataUrl;

    protected override async Task OnInitializedAsync()
    {
        // Edit
        if(Id > 0)
        {
            selectedNewHire = _newHireService.GetNewHiretById(Id);
            newHire = selectedNewHire;
            existingImageDataUrl = $"data:image;base64,{Convert.ToBase64String(selectedNewHire.ImageBytes)}";
        }
    }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;
        fileName = selectedFile.Name;

        //Display chosen image
        var imageStream = selectedFile.OpenReadStream();
        var buffer = new byte[selectedFile.Size];
        await imageStream.ReadAsync(buffer);
        imageDataUrl = $"data:{selectedFile.ContentType};base64,{Convert.ToBase64String(buffer)}";
    }

    protected async Task SaveNewHire()
    {
        if(Id == 0)
        {
            // create
            if (selectedFile != null)
            {
                using (var memoryStream = new MemoryStream())
                {
                    await selectedFile.OpenReadStream().CopyToAsync(memoryStream);
                    var newRecord = new NewHire
                    {
                        FirstName = newHire.FirstName,
                        LastName = newHire.LastName,
                        MiddleName = newHire.MiddleName,
                        ImageFileName = fileName,
                        ImageBytes = memoryStream.ToArray(),
                        FileType = DetermineFileType(selectedFile.ContentType).ToString()
                    };

                    _newHireService.AddNewHire(newRecord);
                    
                }
            }
        }
        else if(Id > 0)
        {
            // edit

        }
    }

    public void Cancel()
    {
        _nav.NavigateTo("/");
    }

    private FileTypeEnum DetermineFileType(string contentType)
    {
        // Create a dictionary to map content types to file types
        Dictionary<string, FileTypeEnum> contentTypeMapping = new Dictionary<string, FileTypeEnum>
    {
        { "image/jpeg", FileTypeEnum.Image },
        { "image/png", FileTypeEnum.Image },
        { "application/pdf", FileTypeEnum.PDF },
        // Add more mappings for other file types
    };

        // Check if the content type exists in the dictionary, otherwise consider it as 'Other'
        if (contentTypeMapping.TryGetValue(contentType, out var fileType))
        {
            return fileType;
        }
        else
        {
            return FileTypeEnum.Other;
        }
    }

}
